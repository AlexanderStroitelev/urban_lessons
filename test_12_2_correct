class Runner:
    def __init__(self, name, speed=5):
        self.name = name
        self.distance = 0
        self.speed = speed

    def run(self):
        self.distance += self.speed * 2

    def walk(self):
        self.distance += self.speed

    def __str__(self):
        return self.name

    def __eq__(self, other):
        if isinstance(other, str):
            return self.name == other
        elif isinstance(other, Runner):
            return self.name == other.name


class Tournament:
    def __init__(self, distance, *participants):
        self.full_distance = distance
        self.participants = list(participants)

    def start(self):
        finishers = {}
        place = 1
        while self.participants:
            for participant in self.participants:
                participant.run()

            for participant in self.participants[:]:
                if participant.distance >= self.full_distance:
                    finishers[place] = participant
                    place += 1
                    self.participants.remove(participant)

        return finishers
______________________________________________________________________________________________________________________


import unittest

from R_T_corect import Runner, Tournament


class TournamentTest(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.all_results = {}

    def setUp(self):
        self.usain = Runner("Усэйн", 10)
        self.andrey = Runner("Андрей", 9)
        self.nick = Runner("Ник", 3)

    @classmethod
    def tearDownClass(cls):
        for test_name, result in cls.all_results.items():
            formatted_result = cls.format_results(result)
            print(formatted_result)

    @staticmethod
    def format_results(results):
        formatted = (
            "{"
            + ", ".join([f"{place}: {runner}" for place, runner in results.items()])
            + "}"
        )
        return formatted

    def test_usain_and_nick(self):
        tournament = Tournament(90, self.usain, self.nick)
        results = tournament.start()
        TournamentTest.all_results["test_usain_and_nick"] = results
        last_runner_name = results[max(results.keys())].name
        self.assertTrue(
            last_runner_name == "Ник", f"Ожидался Ник, а был {last_runner_name}"
        )

    def test_andrey_and_nick(self):
        tournament = Tournament(90, self.andrey, self.nick)
        results = tournament.start()
        TournamentTest.all_results["test_andrey_and_nick"] = results
        last_runner_name = results[max(results.keys())].name
        self.assertTrue(
            last_runner_name == "Ник", f"Ожидался Ник, а был {last_runner_name}"
        )

    def test_usain_andrey_and_nick(self):
        tournament = Tournament(90, self.usain, self.andrey, self.nick)
        results = tournament.start()
        TournamentTest.all_results["test_usain_andrey_and_nick"] = results
        last_runner_name = results[max(results.keys())].name
        self.assertTrue(
            last_runner_name == "Ник", f"Ожидался Ник, а был {last_runner_name}"
        )

    # Дополнительные тесты
    def test_order_with_usain_and_andrey(self):
        # Проверяем правильность финишного порядка Усэйн и Андрей
        tournament = Tournament(90, self.usain, self.andrey)
        results = tournament.start()
        TournamentTest.all_results["test_order_with_usain_and_andrey"] = results
        first_runner_name = results[1].name
        self.assertTrue(
            first_runner_name == "Усэйн", f"Ожидался Усэйн, а был {first_runner_name}"
        )

    def test_all_finish_in_order(self):
        # Проверяем, что бегуны финишируют в порядке уменьшения скорости
        tournament = Tournament(90, self.usain, self.andrey, self.nick)
        results = tournament.start()
        TournamentTest.all_results["test_all_finish_in_order"] = results
        names_in_order = [results[i].name for i in sorted(results.keys())]
        expected_order = ["Усэйн", "Андрей", "Ник"]
        self.assertEqual(
            names_in_order,
            expected_order,
            f"Ожидался порядок {expected_order}, а был {names_in_order}",
        )


# Запуск тестов
if __name__ == "__main__":
    unittest.main()
